"""
Django settings for micro_subscribers project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import warnings
from django.urls import reverse_lazy
import json
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env(
    APP_ENV=(str, 'prod'),
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, [])
)

env_path = os.path.join(BASE_DIR, '.env')

if os.path.exists(env_path):
    environ.Env.read_env(env_path)
else:
    warnings.warn("Warning: Dotenv doesnt exist")

APP_ENV = env('APP_ENV')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xkx66o@8der!@t6lik-o7f-26_741-y#szt504$j5cfjss1)ks'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = env('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'mozilla_django_oidc',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'common',
    'my_auth',
    'subscriptions'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'micro_subscribers.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'micro_subscribers.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': env.db()
}

AUTH_USER_MODEL = 'my_auth.User'

AUTHENTICATION_BACKENDS = (
    'my_auth.auth.OIDCAuthenticationBackend',
    # ...
)

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': env('DJANGO_LOG_LEVEL'),
            'propagate': False,
        },
    },
}

# KEYCLOAK SECTION

KEYCLOAK_CONFIG = json.loads(env('KEYCLOAK_JSON'))

OIDC_AUTH_URI = '%srealms/%s/protocol/openid-connect' % (KEYCLOAK_CONFIG['auth-server-url'], KEYCLOAK_CONFIG['realm'])
#OIDC_CALLBACK_PUBLIC_URI = 'http://host.docker.internal:8001'

OIDC_RP_SIGN_ALGO = "RS256"

OIDC_RP_IDP_SIGN_KEY = env.str('KEYCLOAK_PUBLIC_KEY', multiline=True)
OIDC_OP_JWKS_ENDPOINT = OIDC_AUTH_URI + '/certs'

OIDC_RP_CLIENT_ID = KEYCLOAK_CONFIG['resource']
OIDC_RP_CLIENT_SECRET = KEYCLOAK_CONFIG['credentials']['secret']

OIDC_OP_AUTHORIZATION_ENDPOINT = OIDC_AUTH_URI + '/auth'
OIDC_OP_TOKEN_ENDPOINT = OIDC_AUTH_URI + '/token'
OIDC_OP_USER_ENDPOINT = OIDC_AUTH_URI + '/userinfo'

OIDC_AUTHENTICATION_CALLBACK_URL = 'auth:callback'

OIDC_OP_LOGOUT_URL_METHOD = 'my_auth.views.after_logout'
OIDC_EXEMPT_URLS = ['auth:login', 'auth:callback', 'auth:logout']

LOGIN_URL = reverse_lazy('auth:login')
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = reverse_lazy('auth:login')
LOGIN_REDIRECT_URL_FAILURE = reverse_lazy('auth:login')
#LOGOUT_REDIRECT_URL = OIDC_AUTH_URI + '/protocol/openid-connect/logout?redirect_uri=' + OIDC_CALLBACK_PUBLIC_URI